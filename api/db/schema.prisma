// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                        Int                         @id @default(autoincrement())
  identifier                String                      @unique
  realName                  String
  nickname                  String
  phoneNumber               String
  birthday                  DateTime
  email                     String                      @default("")
  interests                 String[]
  hashedPassword            String
  salt                      String
  resetToken                String?
  resetTokenExpiresAt       DateTime?
  userSeasonDepartmentGroup UserSeasonDepartmentGroup[]
  groupProgram              GroupProgram[]
  userGroupProgram          UserGroupProgram[]
  post                      Post[]
  comment                   Comment[]
}

model Department {
  id               String             @id @default(cuid())
  name             String
  slug             String             @unique
  createdAt        DateTime           @default(now())
  type             DepartmentType     @default(BOOK)
  group            Group[]
  seasonDepartment SeasonDepartment[]
}

enum DepartmentType {
  BOOK
  ENGLISH
  FOUNDER
}

model Group {
  id           String         @id @default(cuid())
  department   Department     @relation(fields: [departmentId], references: [id])
  name         String
  slug         String         @unique
  createdAt    DateTime       @default(now())
  departmentId String
  seasonGroup  SeasonGroup[]
  GroupProgram GroupProgram[]
}

model Season {
  id               String             @id @default(cuid())
  name             String
  startsAt         DateTime
  endsAt           DateTime
  seasonGroup      SeasonGroup[]
  seasonDepartment SeasonDepartment[]
}

model SeasonDepartment {
  id                        String                      @id @default(cuid())
  department                Department                  @relation(fields: [departmentId], references: [id])
  season                    Season                      @relation(fields: [seasonId], references: [id])
  departmentId              String
  seasonId                  String
  message                   String                      @default("")
  createdAt                 DateTime                    @default(now())
  userSeasonDepartmentGroup UserSeasonDepartmentGroup[]
}

model SeasonGroup {
  id                        String                      @id @default(cuid())
  season                    Season                      @relation(fields: [seasonId], references: [id])
  group                     Group                       @relation(fields: [groupId], references: [id])
  seasonId                  String
  groupId                   String
  createdAt                 DateTime                    @default(now())
  userSeasonDepartmentGroup UserSeasonDepartmentGroup[]
}

enum UserSeasonDepartmentGroupStatus {
  APPROVAL_PENDING
  APPROVED
  REFUND_PENDING
  REFUNDED
}

model RefundRequest {
  id                String @id @default(cuid())
  bankAccountNumber String
  bankAccountHolder String
  phoneNumber       String

  userSeasonDepartmentGroup UserSeasonDepartmentGroup?
}

model UserSeasonDepartmentGroup {
  id                 String                          @id @default(cuid())
  user               User                            @relation(fields: [userId], references: [id])
  seasonGroup        SeasonGroup                     @relation(fields: [seasonGroupId], references: [id])
  seasonDepartment   SeasonDepartment                @relation(fields: [seasonDepartmentId], references: [id])
  userId             Int
  seasonGroupId      String
  seasonDepartmentId String
  createdAt          DateTime                        @default(now())
  status             UserSeasonDepartmentGroupStatus
  level              String?
  refundedAt         DateTime?
  refundRequest      RefundRequest?                  @relation(fields: [refundRequestId], references: [id])
  refundRequestId    String?                         @unique
}

enum GroupProgramType {
  BOOK_FREE
  BOOK_DESIGNATED
  ENGLISH
  FOUNDER
}

model GroupProgram {
  id               String             @id @default(cuid())
  title            String
  type             GroupProgramType
  group            Group              @relation(fields: [groupId], references: [id])
  groupId          String
  hostUser         User               @relation(fields: [hostUserId], references: [id])
  hostUserId       Int
  address          String             @default("")
  addressSimple    String             @default("")
  description      String             @default("")
  startsAt         DateTime
  endsAt           DateTime
  userGroupProgram UserGroupProgram[]
}

enum UserGroupProgramStatus {
  NOT_ATTENDED
  ATTENDED
  ATTENDED_LATE
  CANCELLED
}

model UserGroupProgram {
  id             String                 @id @default(cuid())
  user           User                   @relation(fields: [userId], references: [id])
  groupProgram   GroupProgram           @relation(fields: [groupProgramId], references: [id])
  userId         Int
  type           String                 @default("")
  groupProgramId String
  message        String                 @default("")
  createdAt      DateTime               @default(now())
  cancelledAt    DateTime?
  status         UserGroupProgramStatus
}

model Board {
  id     String @id @default(cuid())
  nameEn String @unique
  nameKr String @unique
  post   Post[]
}

model Post {
  id            String    @id @default(cuid())
  board         Board     @relation(fields: [boardId], references: [id])
  boardId       String
  title         String
  content       String
  pinned        Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  imageUrl      String    @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  comment       Comment[]
  commentsCount Int       @default(0)
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
